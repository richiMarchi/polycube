/**
* p4firewall API generated from p4firewall.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* P4firewallApiImpl.h
*
*
*/

#pragma once


#include <memory>
#include <map>
#include <mutex>
#include "../P4firewall.h"

#include "FlowDirectionJsonObject.h"
#include "P4firewallJsonObject.h"
#include "PortsJsonObject.h"
#include "RouteJsonObject.h"
#include <vector>

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace P4firewallApiImpl {
  void create_p4firewall_by_id(const std::string &name, const P4firewallJsonObject &value);
  void create_p4firewall_flow_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface, const FlowDirectionJsonObject &value);
  void create_p4firewall_flow_direction_list_by_id(const std::string &name, const std::vector<FlowDirectionJsonObject> &value);
  void create_p4firewall_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void create_p4firewall_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void create_p4firewall_route_by_id(const std::string &name, const std::string &address, const RouteJsonObject &value);
  void create_p4firewall_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value);
  void delete_p4firewall_by_id(const std::string &name);
  void delete_p4firewall_flow_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface);
  void delete_p4firewall_flow_direction_list_by_id(const std::string &name);
  void delete_p4firewall_ports_by_id(const std::string &name, const std::string &portsName);
  void delete_p4firewall_ports_list_by_id(const std::string &name);
  void delete_p4firewall_route_by_id(const std::string &name, const std::string &address);
  void delete_p4firewall_route_list_by_id(const std::string &name);
  P4firewallJsonObject read_p4firewall_by_id(const std::string &name);
  FlowDirectionJsonObject read_p4firewall_flow_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface);
  uint8_t read_p4firewall_flow_direction_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface);
  std::vector<FlowDirectionJsonObject> read_p4firewall_flow_direction_list_by_id(const std::string &name);
  std::vector<P4firewallJsonObject> read_p4firewall_list_by_id();
  PortsJsonObject read_p4firewall_ports_by_id(const std::string &name, const std::string &portsName);
  std::vector<PortsJsonObject> read_p4firewall_ports_list_by_id(const std::string &name);
  RouteJsonObject read_p4firewall_route_by_id(const std::string &name, const std::string &address);
  std::string read_p4firewall_route_interface_by_id(const std::string &name, const std::string &address);
  std::vector<RouteJsonObject> read_p4firewall_route_list_by_id(const std::string &name);
  std::string read_p4firewall_route_mac_by_id(const std::string &name, const std::string &address);
  void replace_p4firewall_by_id(const std::string &name, const P4firewallJsonObject &value);
  void replace_p4firewall_flow_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface, const FlowDirectionJsonObject &value);
  void replace_p4firewall_flow_direction_list_by_id(const std::string &name, const std::vector<FlowDirectionJsonObject> &value);
  void replace_p4firewall_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void replace_p4firewall_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void replace_p4firewall_route_by_id(const std::string &name, const std::string &address, const RouteJsonObject &value);
  void replace_p4firewall_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value);
  void update_p4firewall_by_id(const std::string &name, const P4firewallJsonObject &value);
  void update_p4firewall_flow_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface, const FlowDirectionJsonObject &value);
  void update_p4firewall_flow_direction_list_by_id(const std::string &name, const std::vector<FlowDirectionJsonObject> &value);
  void update_p4firewall_list_by_id(const std::vector<P4firewallJsonObject> &value);
  void update_p4firewall_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void update_p4firewall_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void update_p4firewall_route_by_id(const std::string &name, const std::string &address, const RouteJsonObject &value);
  void update_p4firewall_route_interface_by_id(const std::string &name, const std::string &address, const std::string &value);
  void update_p4firewall_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value);
  void update_p4firewall_route_mac_by_id(const std::string &name, const std::string &address, const std::string &value);

  /* help related */
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_p4firewall_flow_direction_list_by_id_get_list(const std::string &name);
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_p4firewall_list_by_id_get_list();
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_p4firewall_ports_list_by_id_get_list(const std::string &name);
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_p4firewall_route_list_by_id_get_list(const std::string &name);

}
}
}
}

