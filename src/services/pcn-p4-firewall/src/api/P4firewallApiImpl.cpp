/**
* p4firewall API generated from p4firewall.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "P4firewallApiImpl.h"

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace P4firewallApiImpl {
namespace {
std::unordered_map<std::string, std::shared_ptr<P4firewall>> cubes;
std::mutex cubes_mutex;

std::shared_ptr<P4firewall> get_cube(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  auto iter = cubes.find(name);
  if (iter == cubes.end()) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }

  return iter->second;
}

}

void create_p4firewall_by_id(const std::string &name, const P4firewallJsonObject &jsonObject) {
  {
    // check if name is valid before creating it
    std::lock_guard<std::mutex> guard(cubes_mutex);
    if (cubes.count(name) != 0) {
      throw std::runtime_error("There is already a cube with name " + name);
    }
  }
  auto ptr = std::make_shared<P4firewall>(name, jsonObject);
  std::unordered_map<std::string, std::shared_ptr<P4firewall>>::iterator iter;
  bool inserted;

  std::lock_guard<std::mutex> guard(cubes_mutex);
  std::tie(iter, inserted) = cubes.emplace(name, std::move(ptr));

  if (!inserted) {
    throw std::runtime_error("There is already a cube with name " + name);
  }
}

void replace_p4firewall_by_id(const std::string &name, const P4firewallJsonObject &bridge){
  throw std::runtime_error("Method not supported!");
}

void delete_p4firewall_by_id(const std::string &name) {
  std::lock_guard<std::mutex> guard(cubes_mutex);
  if (cubes.count(name) == 0) {
    throw std::runtime_error("Cube " + name + " does not exist");
  }
  cubes.erase(name);
}

std::vector<P4firewallJsonObject> read_p4firewall_list_by_id() {
  std::vector<P4firewallJsonObject> jsonObject_vect;
  for(auto &i : cubes) {
    auto m = get_cube(i.first);
    jsonObject_vect.push_back(m->toJsonObject());
  }
  return jsonObject_vect;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_p4firewall_list_by_id_get_list() {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  for (auto &x : cubes) {
    nlohmann::fifo_map<std::string, std::string> m;
    m["name"] = x.first;
    r.push_back(std::move(m));
  }
  return r;
}

/**
* @brief   Create flow-direction by ID
*
* Create operation of resource: flow-direction*
*
* @param[in] name ID of name
* @param[in] srcInterface ID of srcInterface
* @param[in] dstInterface ID of dstInterface
* @param[in] value flow-directionbody object
*
* Responses:
*
*/
void
create_p4firewall_flow_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface, const FlowDirectionJsonObject &value) {
  auto p4firewall = get_cube(name);

  return p4firewall->addFlowDirection(srcInterface, dstInterface, value);
}

/**
* @brief   Create flow-direction by ID
*
* Create operation of resource: flow-direction*
*
* @param[in] name ID of name
* @param[in] value flow-directionbody object
*
* Responses:
*
*/
void
create_p4firewall_flow_direction_list_by_id(const std::string &name, const std::vector<FlowDirectionJsonObject> &value) {
  auto p4firewall = get_cube(name);
  p4firewall->addFlowDirectionList(value);
}

/**
* @brief   Create ports by ID
*
* Create operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
create_p4firewall_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) {
  auto p4firewall = get_cube(name);

  return p4firewall->addPorts(portsName, value);
}

/**
* @brief   Create ports by ID
*
* Create operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
create_p4firewall_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) {
  auto p4firewall = get_cube(name);
  p4firewall->addPortsList(value);
}

/**
* @brief   Create route by ID
*
* Create operation of resource: route*
*
* @param[in] name ID of name
* @param[in] address ID of address
* @param[in] value routebody object
*
* Responses:
*
*/
void
create_p4firewall_route_by_id(const std::string &name, const std::string &address, const RouteJsonObject &value) {
  auto p4firewall = get_cube(name);

  return p4firewall->addRoute(address, value);
}

/**
* @brief   Create route by ID
*
* Create operation of resource: route*
*
* @param[in] name ID of name
* @param[in] value routebody object
*
* Responses:
*
*/
void
create_p4firewall_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value) {
  auto p4firewall = get_cube(name);
  p4firewall->addRouteList(value);
}

/**
* @brief   Delete flow-direction by ID
*
* Delete operation of resource: flow-direction*
*
* @param[in] name ID of name
* @param[in] srcInterface ID of srcInterface
* @param[in] dstInterface ID of dstInterface
*
* Responses:
*
*/
void
delete_p4firewall_flow_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface) {
  auto p4firewall = get_cube(name);

  return p4firewall->delFlowDirection(srcInterface, dstInterface);
}

/**
* @brief   Delete flow-direction by ID
*
* Delete operation of resource: flow-direction*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_p4firewall_flow_direction_list_by_id(const std::string &name) {
  auto p4firewall = get_cube(name);
  p4firewall->delFlowDirectionList();
}

/**
* @brief   Delete ports by ID
*
* Delete operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
*
* Responses:
*
*/
void
delete_p4firewall_ports_by_id(const std::string &name, const std::string &portsName) {
  auto p4firewall = get_cube(name);

  return p4firewall->delPorts(portsName);
}

/**
* @brief   Delete ports by ID
*
* Delete operation of resource: ports*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_p4firewall_ports_list_by_id(const std::string &name) {
  auto p4firewall = get_cube(name);
  p4firewall->delPortsList();
}

/**
* @brief   Delete route by ID
*
* Delete operation of resource: route*
*
* @param[in] name ID of name
* @param[in] address ID of address
*
* Responses:
*
*/
void
delete_p4firewall_route_by_id(const std::string &name, const std::string &address) {
  auto p4firewall = get_cube(name);

  return p4firewall->delRoute(address);
}

/**
* @brief   Delete route by ID
*
* Delete operation of resource: route*
*
* @param[in] name ID of name
*
* Responses:
*
*/
void
delete_p4firewall_route_list_by_id(const std::string &name) {
  auto p4firewall = get_cube(name);
  p4firewall->delRouteList();
}

/**
* @brief   Read p4firewall by ID
*
* Read operation of resource: p4firewall*
*
* @param[in] name ID of name
*
* Responses:
* P4firewallJsonObject
*/
P4firewallJsonObject
read_p4firewall_by_id(const std::string &name) {
  return get_cube(name)->toJsonObject();

}

/**
* @brief   Read flow-direction by ID
*
* Read operation of resource: flow-direction*
*
* @param[in] name ID of name
* @param[in] srcInterface ID of srcInterface
* @param[in] dstInterface ID of dstInterface
*
* Responses:
* FlowDirectionJsonObject
*/
FlowDirectionJsonObject
read_p4firewall_flow_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface) {
  auto p4firewall = get_cube(name);
  return p4firewall->getFlowDirection(srcInterface, dstInterface)->toJsonObject();

}

/**
* @brief   Read direction by ID
*
* Read operation of resource: direction*
*
* @param[in] name ID of name
* @param[in] srcInterface ID of srcInterface
* @param[in] dstInterface ID of dstInterface
*
* Responses:
* uint8_t
*/
uint8_t
read_p4firewall_flow_direction_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface) {
  auto p4firewall = get_cube(name);
  auto flowDirection = p4firewall->getFlowDirection(srcInterface, dstInterface);
  return flowDirection->getDirection();

}

/**
* @brief   Read flow-direction by ID
*
* Read operation of resource: flow-direction*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<FlowDirectionJsonObject>
*/
std::vector<FlowDirectionJsonObject>
read_p4firewall_flow_direction_list_by_id(const std::string &name) {
  auto p4firewall = get_cube(name);
  auto &&flowDirection = p4firewall->getFlowDirectionList();
  std::vector<FlowDirectionJsonObject> m;
  for(auto &i : flowDirection)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read ports by ID
*
* Read operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
*
* Responses:
* PortsJsonObject
*/
PortsJsonObject
read_p4firewall_ports_by_id(const std::string &name, const std::string &portsName) {
  auto p4firewall = get_cube(name);
  return p4firewall->getPorts(portsName)->toJsonObject();

}

/**
* @brief   Read ports by ID
*
* Read operation of resource: ports*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<PortsJsonObject>
*/
std::vector<PortsJsonObject>
read_p4firewall_ports_list_by_id(const std::string &name) {
  auto p4firewall = get_cube(name);
  auto &&ports = p4firewall->getPortsList();
  std::vector<PortsJsonObject> m;
  for(auto &i : ports)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read route by ID
*
* Read operation of resource: route*
*
* @param[in] name ID of name
* @param[in] address ID of address
*
* Responses:
* RouteJsonObject
*/
RouteJsonObject
read_p4firewall_route_by_id(const std::string &name, const std::string &address) {
  auto p4firewall = get_cube(name);
  return p4firewall->getRoute(address)->toJsonObject();

}

/**
* @brief   Read interface by ID
*
* Read operation of resource: interface*
*
* @param[in] name ID of name
* @param[in] address ID of address
*
* Responses:
* std::string
*/
std::string
read_p4firewall_route_interface_by_id(const std::string &name, const std::string &address) {
  auto p4firewall = get_cube(name);
  auto route = p4firewall->getRoute(address);
  return route->getInterface();

}

/**
* @brief   Read route by ID
*
* Read operation of resource: route*
*
* @param[in] name ID of name
*
* Responses:
* std::vector<RouteJsonObject>
*/
std::vector<RouteJsonObject>
read_p4firewall_route_list_by_id(const std::string &name) {
  auto p4firewall = get_cube(name);
  auto &&route = p4firewall->getRouteList();
  std::vector<RouteJsonObject> m;
  for(auto &i : route)
    m.push_back(i->toJsonObject());
  return m;
}

/**
* @brief   Read mac by ID
*
* Read operation of resource: mac*
*
* @param[in] name ID of name
* @param[in] address ID of address
*
* Responses:
* std::string
*/
std::string
read_p4firewall_route_mac_by_id(const std::string &name, const std::string &address) {
  auto p4firewall = get_cube(name);
  auto route = p4firewall->getRoute(address);
  return route->getMac();

}

/**
* @brief   Replace flow-direction by ID
*
* Replace operation of resource: flow-direction*
*
* @param[in] name ID of name
* @param[in] srcInterface ID of srcInterface
* @param[in] dstInterface ID of dstInterface
* @param[in] value flow-directionbody object
*
* Responses:
*
*/
void
replace_p4firewall_flow_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface, const FlowDirectionJsonObject &value) {
  auto p4firewall = get_cube(name);

  return p4firewall->replaceFlowDirection(srcInterface, dstInterface, value);
}

/**
* @brief   Replace flow-direction by ID
*
* Replace operation of resource: flow-direction*
*
* @param[in] name ID of name
* @param[in] value flow-directionbody object
*
* Responses:
*
*/
void
replace_p4firewall_flow_direction_list_by_id(const std::string &name, const std::vector<FlowDirectionJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Replace ports by ID
*
* Replace operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
replace_p4firewall_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) {
  auto p4firewall = get_cube(name);

  return p4firewall->replacePorts(portsName, value);
}

/**
* @brief   Replace ports by ID
*
* Replace operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
replace_p4firewall_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Replace route by ID
*
* Replace operation of resource: route*
*
* @param[in] name ID of name
* @param[in] address ID of address
* @param[in] value routebody object
*
* Responses:
*
*/
void
replace_p4firewall_route_by_id(const std::string &name, const std::string &address, const RouteJsonObject &value) {
  auto p4firewall = get_cube(name);

  return p4firewall->replaceRoute(address, value);
}

/**
* @brief   Replace route by ID
*
* Replace operation of resource: route*
*
* @param[in] name ID of name
* @param[in] value routebody object
*
* Responses:
*
*/
void
replace_p4firewall_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update p4firewall by ID
*
* Update operation of resource: p4firewall*
*
* @param[in] name ID of name
* @param[in] value p4firewallbody object
*
* Responses:
*
*/
void
update_p4firewall_by_id(const std::string &name, const P4firewallJsonObject &value) {
  auto p4firewall = get_cube(name);

  return p4firewall->update(value);
}

/**
* @brief   Update flow-direction by ID
*
* Update operation of resource: flow-direction*
*
* @param[in] name ID of name
* @param[in] srcInterface ID of srcInterface
* @param[in] dstInterface ID of dstInterface
* @param[in] value flow-directionbody object
*
* Responses:
*
*/
void
update_p4firewall_flow_direction_by_id(const std::string &name, const std::string &srcInterface, const std::string &dstInterface, const FlowDirectionJsonObject &value) {
  auto p4firewall = get_cube(name);
  auto flowDirection = p4firewall->getFlowDirection(srcInterface, dstInterface);

  return flowDirection->update(value);
}

/**
* @brief   Update flow-direction by ID
*
* Update operation of resource: flow-direction*
*
* @param[in] name ID of name
* @param[in] value flow-directionbody object
*
* Responses:
*
*/
void
update_p4firewall_flow_direction_list_by_id(const std::string &name, const std::vector<FlowDirectionJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update p4firewall by ID
*
* Update operation of resource: p4firewall*
*
* @param[in] value p4firewallbody object
*
* Responses:
*
*/
void
update_p4firewall_list_by_id(const std::vector<P4firewallJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update ports by ID
*
* Update operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] portsName ID of ports_name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
update_p4firewall_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value) {
  auto p4firewall = get_cube(name);
  auto ports = p4firewall->getPorts(portsName);

  return ports->update(value);
}

/**
* @brief   Update ports by ID
*
* Update operation of resource: ports*
*
* @param[in] name ID of name
* @param[in] value portsbody object
*
* Responses:
*
*/
void
update_p4firewall_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update route by ID
*
* Update operation of resource: route*
*
* @param[in] name ID of name
* @param[in] address ID of address
* @param[in] value routebody object
*
* Responses:
*
*/
void
update_p4firewall_route_by_id(const std::string &name, const std::string &address, const RouteJsonObject &value) {
  auto p4firewall = get_cube(name);
  auto route = p4firewall->getRoute(address);

  return route->update(value);
}

/**
* @brief   Update interface by ID
*
* Update operation of resource: interface*
*
* @param[in] name ID of name
* @param[in] address ID of address
* @param[in] value Outgoing interface
*
* Responses:
*
*/
void
update_p4firewall_route_interface_by_id(const std::string &name, const std::string &address, const std::string &value) {
  auto p4firewall = get_cube(name);
  auto route = p4firewall->getRoute(address);

  return route->setInterface(value);
}

/**
* @brief   Update route by ID
*
* Update operation of resource: route*
*
* @param[in] name ID of name
* @param[in] value routebody object
*
* Responses:
*
*/
void
update_p4firewall_route_list_by_id(const std::string &name, const std::vector<RouteJsonObject> &value) {
  throw std::runtime_error("Method not supported");
}

/**
* @brief   Update mac by ID
*
* Update operation of resource: mac*
*
* @param[in] name ID of name
* @param[in] address ID of address
* @param[in] value Destination MAC address
*
* Responses:
*
*/
void
update_p4firewall_route_mac_by_id(const std::string &name, const std::string &address, const std::string &value) {
  auto p4firewall = get_cube(name);
  auto route = p4firewall->getRoute(address);

  return route->setMac(value);
}



/*
 * help related
 */

std::vector<nlohmann::fifo_map<std::string, std::string>> read_p4firewall_flow_direction_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&p4firewall = get_cube(name);

  auto &&flowDirection = p4firewall->getFlowDirectionList();
  for(auto &i : flowDirection) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["srcInterface"] = i->getSrcInterface();
    keys["dstInterface"] = i->getDstInterface();

    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_p4firewall_ports_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&p4firewall = get_cube(name);

  auto &&ports = p4firewall->getPortsList();
  for(auto &i : ports) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["name"] = i->getName();

    r.push_back(keys);
  }
  return r;
}

std::vector<nlohmann::fifo_map<std::string, std::string>> read_p4firewall_route_list_by_id_get_list(const std::string &name) {
  std::vector<nlohmann::fifo_map<std::string, std::string>> r;
  auto &&p4firewall = get_cube(name);

  auto &&route = p4firewall->getRouteList();
  for(auto &i : route) {
    nlohmann::fifo_map<std::string, std::string> keys;

    keys["address"] = i->getAddress();

    r.push_back(keys);
  }
  return r;
}


}

}
}
}

