/**
* p4firewall API generated from p4firewall.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */


#include "P4firewallBase.h"

P4firewallBase::P4firewallBase(const std::string name) {
  logger()->set_pattern("[%Y-%m-%d %H:%M:%S.%e] [P4firewall] [%n] [%l] %v");
}



P4firewallBase::~P4firewallBase() {}

void P4firewallBase::update(const P4firewallJsonObject &conf) {
  set_conf(conf.getBase());

  if (conf.portsIsSet()) {
    for (auto &i : conf.getPorts()) {
      auto name = i.getName();
      auto m = getPorts(name);
      m->update(i);
    }
  }
  if (conf.flowDirectionIsSet()) {
    for (auto &i : conf.getFlowDirection()) {
      auto srcInterface = i.getSrcInterface();
      auto dstInterface = i.getDstInterface();
      auto m = getFlowDirection(srcInterface, dstInterface);
      m->update(i);
    }
  }
  if (conf.routeIsSet()) {
    for (auto &i : conf.getRoute()) {
      auto address = i.getAddress();
      auto m = getRoute(address);
      m->update(i);
    }
  }
}

P4firewallJsonObject P4firewallBase::toJsonObject() {
  P4firewallJsonObject conf;
  conf.setBase(to_json());

  conf.setName(getName());
  for (auto &i : getPortsList()) {
    conf.addPorts(i->toJsonObject());
  }
  for(auto &i : getFlowDirectionList()) {
    conf.addFlowDirection(i->toJsonObject());
  }
  for(auto &i : getRouteList()) {
    conf.addRoute(i->toJsonObject());
  }

  return conf;
}
void P4firewallBase::addPortsList(const std::vector<PortsJsonObject> &conf) {
  for (auto &i : conf) {
    std::string name_ = i.getName();
    addPorts(name_, i);
  }
}

void P4firewallBase::replacePorts(const std::string &name, const PortsJsonObject &conf) {
  delPorts(name);
  std::string name_ = conf.getName();
  addPorts(name_, conf);
}

void P4firewallBase::delPortsList() {
  auto elements = getPortsList();
  for (auto &i : elements) {
    std::string name_ = i->getName();
    delPorts(name_);
  }
}

void P4firewallBase::addPorts(const std::string &name, const PortsJsonObject &conf) {
  add_port<PortsJsonObject>(name, conf);
}

void P4firewallBase::delPorts(const std::string &name) {
  remove_port(name);
}

std::shared_ptr<Ports> P4firewallBase::getPorts(const std::string &name) {
  return get_port(name);
}

std::vector<std::shared_ptr<Ports>> P4firewallBase::getPortsList() {
  return get_ports();
}
void P4firewallBase::addFlowDirectionList(const std::vector<FlowDirectionJsonObject> &conf) {
  for (auto &i : conf) {
    std::string srcInterface_ = i.getSrcInterface();
    std::string dstInterface_ = i.getDstInterface();
    addFlowDirection(srcInterface_, dstInterface_, i);
  }
}

void P4firewallBase::replaceFlowDirection(const std::string &srcInterface, const std::string &dstInterface, const FlowDirectionJsonObject &conf) {
  delFlowDirection(srcInterface, dstInterface);
  std::string srcInterface_ = conf.getSrcInterface();
  std::string dstInterface_ = conf.getDstInterface();
  addFlowDirection(srcInterface_, dstInterface_, conf);
}

void P4firewallBase::delFlowDirectionList() {
  auto elements = getFlowDirectionList();
  for (auto &i : elements) {
    std::string srcInterface_ = i->getSrcInterface();
    std::string dstInterface_ = i->getDstInterface();
    delFlowDirection(srcInterface_, dstInterface_);
  }
}
void P4firewallBase::addRouteList(const std::vector<RouteJsonObject> &conf) {
  for (auto &i : conf) {
    std::string address_ = i.getAddress();
    addRoute(address_, i);
  }
}

void P4firewallBase::replaceRoute(const std::string &address, const RouteJsonObject &conf) {
  delRoute(address);
  std::string address_ = conf.getAddress();
  addRoute(address_, conf);
}

void P4firewallBase::delRouteList() {
  auto elements = getRouteList();
  for (auto &i : elements) {
    std::string address_ = i->getAddress();
    delRoute(address_);
  }
}


