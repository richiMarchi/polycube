/**
* p4firewall API generated from p4firewall.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* P4firewallBase.h
*
*
*/

#pragma once

#include "../serializer/P4firewallJsonObject.h"

#include "../FlowDirection.h"
#include "../Ports.h"
#include "../Route.h"

#include "polycube/services/cube.h"
#include "polycube/services/port.h"



#include "polycube/services/utils.h"
#include "polycube/services/fifo_map.hpp"

#include <spdlog/spdlog.h>

using namespace polycube::service::model;


class P4firewallBase: public virtual polycube::service::Cube<Ports> {
 public:
  P4firewallBase(const std::string name);
  
  virtual ~P4firewallBase();
  virtual void update(const P4firewallJsonObject &conf);
  virtual P4firewallJsonObject toJsonObject();

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  virtual std::shared_ptr<Ports> getPorts(const std::string &name);
  virtual std::vector<std::shared_ptr<Ports>> getPortsList();
  virtual void addPorts(const std::string &name, const PortsJsonObject &conf);
  virtual void addPortsList(const std::vector<PortsJsonObject> &conf);
  virtual void replacePorts(const std::string &name, const PortsJsonObject &conf);
  virtual void delPorts(const std::string &name);
  virtual void delPortsList();

  /// <summary>
  ///
  /// </summary>
  virtual std::shared_ptr<FlowDirection> getFlowDirection(const std::string &srcInterface, const std::string &dstInterface) = 0;
  virtual std::vector<std::shared_ptr<FlowDirection>> getFlowDirectionList() = 0;
  virtual void addFlowDirection(const std::string &srcInterface, const std::string &dstInterface, const FlowDirectionJsonObject &conf) = 0;
  virtual void addFlowDirectionList(const std::vector<FlowDirectionJsonObject> &conf);
  virtual void replaceFlowDirection(const std::string &srcInterface, const std::string &dstInterface, const FlowDirectionJsonObject &conf);
  virtual void delFlowDirection(const std::string &srcInterface,const std::string &dstInterface) = 0;
  virtual void delFlowDirectionList();

  /// <summary>
  /// Entry associated with the ARP table
  /// </summary>
  virtual std::shared_ptr<Route> getRoute(const std::string &address) = 0;
  virtual std::vector<std::shared_ptr<Route>> getRouteList() = 0;
  virtual void addRoute(const std::string &address, const RouteJsonObject &conf) = 0;
  virtual void addRouteList(const std::vector<RouteJsonObject> &conf);
  virtual void replaceRoute(const std::string &address, const RouteJsonObject &conf);
  virtual void delRoute(const std::string &address) = 0;
  virtual void delRouteList();
};
