/**
* p4firewall API generated from p4firewall.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "P4firewallJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

P4firewallJsonObject::P4firewallJsonObject() {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_flowDirectionIsSet = false;
  m_routeIsSet = false;
}

P4firewallJsonObject::P4firewallJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_flowDirectionIsSet = false;
  m_routeIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ports")) {
    for (auto& item : val["ports"]) {
      PortsJsonObject newItem{ item };
      m_ports.push_back(newItem);
    }

    m_portsIsSet = true;
  }

  if (val.count("flow-direction")) {
    for (auto& item : val["flow-direction"]) {
      FlowDirectionJsonObject newItem{ item };
      m_flowDirection.push_back(newItem);
    }

    m_flowDirectionIsSet = true;
  }

  if (val.count("route")) {
    for (auto& item : val["route"]) {
      RouteJsonObject newItem{ item };
      m_route.push_back(newItem);
    }

    m_routeIsSet = true;
  }
}

nlohmann::json P4firewallJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_flowDirection) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["flow-direction"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_route) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["route"] = jsonArray;
    }
  }

  return val;
}

std::string P4firewallJsonObject::getName() const {
  return m_name;
}

void P4firewallJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool P4firewallJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



const std::vector<PortsJsonObject>& P4firewallJsonObject::getPorts() const{
  return m_ports;
}

void P4firewallJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
  m_portsIsSet = true;
}


bool P4firewallJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void P4firewallJsonObject::unsetPorts() {
  m_portsIsSet = false;
}

const std::vector<FlowDirectionJsonObject>& P4firewallJsonObject::getFlowDirection() const{
  return m_flowDirection;
}

void P4firewallJsonObject::addFlowDirection(FlowDirectionJsonObject value) {
  m_flowDirection.push_back(value);
  m_flowDirectionIsSet = true;
}


bool P4firewallJsonObject::flowDirectionIsSet() const {
  return m_flowDirectionIsSet;
}

void P4firewallJsonObject::unsetFlowDirection() {
  m_flowDirectionIsSet = false;
}

const std::vector<RouteJsonObject>& P4firewallJsonObject::getRoute() const{
  return m_route;
}

void P4firewallJsonObject::addRoute(RouteJsonObject value) {
  m_route.push_back(value);
  m_routeIsSet = true;
}


bool P4firewallJsonObject::routeIsSet() const {
  return m_routeIsSet;
}

void P4firewallJsonObject::unsetRoute() {
  m_routeIsSet = false;
}


}
}
}

